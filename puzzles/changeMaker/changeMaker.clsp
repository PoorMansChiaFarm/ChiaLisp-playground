

(mod 
    (
    FIX_FEE_AMOUNT
    parent_amount
    amount_to_divide
    p2_puzzlehash
    )

    (include condition_codes.clib)


;todo assert that my amount is the some as parent amount so no amount can be burn't as fees 
;or manybe assert a fixed fee amount (1000 mojo) wich will need to be taken from parent amount



;Return a total form a list of intergers (list I1 I2 I3 In)
    (defun sum_list (interger_list)
        (if (l interger_list )
        
            (+ (f interger_list) (sum_list (r interger_list)))
            
            0
        )
    )
            

    (defun create_amounts_list (amount_to_divide)
        (list 
            (/ amount_to_divide 2)
            (/ amount_to_divide 5)
            (/ amount_to_divide 10)
            (/ amount_to_divide 20)
            (/ amount_to_divide 50)
            (/ amount_to_divide 100)
        
        )
    
    )

    (defun calculate_change (
       parent_amount
       amount_to_divide
       change_list
       );

        (+ (- parent_amount amount_to_divide) (- amount_to_divide sum_list (change_list)))   
    )

    
    (list 
        
        (sum_list (list 20 30 40))
        (create_amounts_list ( amount_to_divide ))

        ; assert all_coin_amounts + spare_change == parent_amount <- to assert nothing wacky is happening 

        (ASSERT_MY_AMOUNT parent_amount) ; makes sure that the provided parent amount is equal to the coins amount preventing fee harvesting by setting perant amount lower
        
    )

        ;(calculate_change ( parent_amount amount_to_divide (create_amounts_list ( amount_to_divide ))))
        
        
        
    

    


)